{
  "HOME_DESCRIPTION": "nggs is a collection of components for angular 1.x which I developed while working on my day-to-day projects, everything was made focusing in make my team's development faster and easier. <br /> As I really enjoyed working on these components and loved the result. I hope you guys appreciate it. <hr /> Install via NPM: <code>npm install --save nggs</code>",
  "HOME_FOOTER_BLOCKQUOTE": "All my code and demos are written based on John Papa's <a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md\" target=\"_blank\">Angular Style Guide</a>, if you have some doubts about the demos's source code, take a look on it, it's a really amazing style guide.",
  "INTRODUCTION": "Introduction",
  "DEMO": "Demo",
  "EXAMPLE": "Example(s):",
  "SINTAX": "Sintax",
  "DYNAMIC_PARAMS": "Dynamic parameters",
  "CONFIGURATION": "Configuration",

  "HTTP_TITLE_DESCRIPTION": "A component for easy generation of methods for accessing <b>REST APIs</b> using angular's <b>$http</b>.",
  "HTTP_INFO_DESCRIPTION": "The proposal of <code>nggs.http</code> is to stop wrinting methods that simply execute a <code>$http</code> or <code>$resource</code>. The idea is write an <code>array</code> of <code>strings</code> and <code>arrays</code> or an <code>objeto</code> with <code>strings</code> and <code>arrays</code> that correspond to the desired HTTP calls.",
  "HTTP_EXAMPLE_1_CODE": "var method = {\n  newUser: '@post',\n  updateUser: '@put=/:id',\n  getUser: '@get=/:id',\n  deleteUser: '@delete=/:id',\n  getUsersPage: ['@get', { params: { page: 1, size: 10 } }]\n}\n\nOU\n\nvar methods = [\n  'newUser@post',\n  'updateUser@put=/:id',\n  'getUser@get=/:id',\n  'deleteUser@delete=/:id',\n  ['getUsersPage@get', { params: { page: 1, size: 10 } }],\n]\n\nvar api = ggHttp('http://www.mydomain.com/api/user', methods, otherApi);",
  "HTTP_EXAMPLE_1_RESULT": "The result of the created methods will be:",
  "HTTP_EXAMPLE_1_RESULT_CODE": "api.newUser({ name: 'Giovane' })\nPOST http://www.mydomain.com/api/user and { name: 'Giovane' } as payload\n\napi.updateUser({ id: 1 }, { name: 'Giovane Souza' })\nPUT http://www.mydomain.com/api/user/1 and { name: 'Giovane Souza' } as payload\n\napi.getUser({ id: 1 })\nGET http://www.mydomain.com/api/user/1\n\napi.deleteUser({ id: 1 })\nDELETE http://www.mydomain.com/api/user/1\n\napi.getUsersPage()\nGET http://www.mydomain.com/api/user&page=1&size=10\n\napi.getUsersPage({ page: 2, size: 10 })\nGET http://mydomain.com/api/user&page=2&size=10",
  "HTTP_EXAMPLE_1_EXPLANATION": "Observe that the method <code>getUsersPage</code> is created with an <code>array</code> composed by a <code>string</code> and an <code>objeto</code>.<br />The <code>string</code> is responsible to identify the desired <code>HTTP</code> method and the endpoint's url.<br />The <code>object</code> is optinal and is responsible for any <code>default</code> configuration that you may want set to the method.<br />Observe that if no <code>query param</code> is given to the method, the <code>default</code> parameters are <code>?page=1&size=10</code>.<br />Afterwards the order and responsabilities of each parameter will be explained.<br />Also, observe that there is a third parameter on the method <code>ggHttp</code>, the <code>otherApi</code>. This third parameter is here for the case you want to merge your new created api to another existing objeto. It's basically an \"extends\".",
  "HTTP_SINTAX_DESCRIPTION": "The sintax to create the methods are simple:",
  "HTTP_EXAMPLE_2_CODE": "[\n  \"{methodsName}@{httpMethod}={endpointUrl}\",\n  [\"{methodsName}@{httpMethod}={endpointUrl}\", {methodsDefaultConfiguration}]\n\nOU\n\n{\n  {methodsName}: \"@{httpMethod}={endpointUrl}\",\n  {methodsName}: [\"@{httpMethod}={endpointUrl}\", {methodsDefaultConfiguration}]\n}",
  "HTTP_EXAMPLE_2_EXPLANATION_1": "The <code>methodsName</code> is the name of the method created. <br /><br /> The <code>@</code> followed by <code>httpMethod</code> define the HTTP method of the request. The accepted and the way to use them: <code>@get/@Get/@GET, @post/@Post/@POST, @put/@Put/@PUT e @delete/@Delete/@DELETE</code>. <br /><br />The <code>endpointUrl</code> is the service's url. You can use variables inside the url by using <code>:</code>.",
  "HTTP_EXAMPLE_2_RESULT": "http://www.mydomain.com/api/user/:id  -> The :id is the variable",
  "HTTP_EXAMPLE_2_EXPLANATION_2": "The <code>{methodsDefaultConfiguration}</code> will be the default configuration to the <code>$http</code> of it's request. It'll overwrite the default configuration made with <code>ggHttpConfigProvider</code> which will be presented soon. And it may be overwriten by calling the method and passing an object for the <code>$http</code> configuration, it'll be presented soon.",
  "HTTP_DYNAMIC_PARAMS_DESCRIPTION": "The dynamic parameters follow the order: 1º url variables, 2º payload, 3º query params e 4º HTTP configuration.<br /><br />1º <strong>Url variables</strong> - If there is any variable markup in the url, the first parameter will be the url variables. If there isn't any variable markup, the next in the order takes your place. The variables must be passed thru an object that their attributes correspond to the variables.<br />Example: To an url <code>/user/:id</code> the url parameter must have an attribute named <code>id</code>.<br /><br/>2º <strong>Payload</strong> - If the HTTP method is <em class=\"text-uppercase\"><strong>DIFERENT</strong></em> from <code>GET</code>, this parameter is considerated and represents the request's payload. If the HTTP method is <code>GET</code>, the next parameter takes it's place.<br /><br />3º <strong>Query params</strong> - This parameter insert the object passed to the <code>params</code> attribute from <code>$http</code>. As there isn't any condition for this parameter, to use the next parameter you should just ignore it passing an empty object or null. But if don't need both this parameter and the next, you can omit them.<br /><br />4º <strong>HTTP Configuration</strong> - It It sets all attributes to the request's <code>$http</code>. As it's the last parameter it can be ignored if it's not needed.",
  "HTTP_EXAMPLE_3_CODE": "Url variables + POST/PUT/DELETE:\n1º parameter = Url variables's object -> REQUIRED\n2º parameter = Payload da requisição -> REQUIRED\n3º parameter = Query params's object -> OPCIONAL\n4º parameter = $http's configuration object -> OPCIONAL\n\nPOST/PUT/DELETE:\n1º parameter = Request's payload -> REQUIRED\n2º parameter = Query params's object -> OPCIONAL\n3º parameter = $http's configuration object -> OPCIONAL\n\nVariáveis de url + GET:\n1º parameter = Url variables's object -> REQUIRED\n2º parameter = Query params's object -> OPCIONAL\n3º parameter = $http's configuration object -> OPCIONAL\n\nGET:\n1º parameter = Query params's object -> OPCIONAL\n2º parameter = $http's configuration object -> OPCIONAL",
  "HTTP_CANCELING_REQUEST": "Canceling request",
  "HTTP_CANCELING_REQUEST_DESCRIPTION": "If you need to cancel a requrest(forcing a <code>timeout</code>), every <code>Promise</code> created by <code>ggHttp</code> implements the request cancellation thru <code>$http</code>'s <code>timeout</code>. Then you just need to invoke <code>.cancel()</code> from the returned <code>Promise</code>",
  "HTTP_EXAMPLE_4_CODE": "api.method().cancel()",
  "HTTP_CANCELING_REQUEST_ALERT": "<strong>Attention!</strong> If you configure a default <code>timeout</code> thru <code>nggs.http</code> or by interceptors, the cancellation method won't work. If you configure a thru <code>nggs.http</code> API, the cancellation method won't be created, throwing an error if invoked.",
  "HTTP_EXAMPLE_5_EXPLANATION": "To ignore the default <code>timeout</code> configuration you just need to pass the attribute <code>cancelable</code> as a configuration parameter to overwrite.",
  "HTTP_EXAMPLE_5_CODE": "var methods = {\n  getPosts: [\"@get\", { cancelable: true }]\n}\n// It'll overwrite the default configuration made by ggHttpConfigProvider\n\napi.getPosts({query params}, { cancelable: true });\n// It'll overwrite the default configuration made by ggHttpConfigProvider and by the method creation",
  "HTTP_CONFIGURATION_DESCRIPTION": "Beyond the configuration presented above, during the methods generation and invokation, you may set a default configuration for all methods created by <code>ggHttp()</code>. You just need to use <code>ggHttpConfigProvider</code> in your's app <code>.config()</code> lifecycle.",
  "HTTP_EXAMPLE_6_CODE": ".config(['ggHttpConfigProvider', function(ggHttpConfigProvider) {\n  ggHttpConfigProvider.setDefaults({ headers: ..., transformRequest: ..., transformResponse: ... });\n}]);",
  "HTTP_CONFIGURATION_ALERT": "The configurations are the ones in the <code>$http</code> API's.",

  "LOADER_TITLE_DESCRIPTION": "A component that launches a loader automatically by intercepting all http requests made by angular's <b>$http</b> service or manually thru a service.",
  "LOADER_INFO_DESCRIPTION": "The proposal of <code>nggs.loader</code> is having an easy way to activate and deactivate loaders: images, phrases or icons that shows the user that some process if happening, blocking the screen, a portion of the screen or at least an indicator in the screen's corner. <br /> There is two ways to use it: thru <code>interceptor</code> and a <code>service</code>.",
  "LOADER_EXAMPLE_1_CODE": "Interceptor, in your app's .config() \n$httpProvider.interceptors.unshift('ggLoaderInterceptor');\n\nService\nggLoader.show() e ggLoader.hide()\n\nHTML\n&lt;div gg-loader class=\"ggLoader\"&gt;\n  &lt;img src=\"image.png\" class=\"ggLoaderImage\" /&gt;\n&lt;/div&gt;",
  "LOADER_EXAMPLE_1_EXPLANATION": "When a HTTP request is made thru <code>$http</code> the element with the directive <code>gg-loader</code> will be activated and will appear. Note the usage of <code>.unshift()</code> on the <code>$httpProvider</code>'s interceptors array, this make <code>ggLoaderInterceptor</code> the first interceptor the be executed.<br />To manual activation you just need to invoke the methods <code>.show() and .hide()</code> from <code>ggLoader</code> service",
  "LOADER_EXAMPLE_1_ALERT": "The classes <b>ggLoader</b> and <b>ggLoaderImage</b> are examples of classes for your loaders, feel free to use your own classes. The focus of this component is the activation and deactivation trigger",
  "LOADER_ALERT": "<strong>Atention!</strong> When manually activating the loader thru the service <code>ggLoader</code>, remember to call the method <code>.hide()</code> the same amount of times you called <code>.show()</code>",
  "LOADER_IGNORING_INTERCEPTOR_TITLE": "Ignoring the interceptor",
  "LOADER_IGNORING_INTERCEPTOR_DESCRIPTION": "If you don't want the interceptor to activate the directive during a HTTP request, just add this query param to your request: <code>ggloader=false</code>",
  "LOADER_MULTIPLE_LOADERS_TITLE": "Multiple loaders",
  "LOADER_MULTIPLE_LOADERS_DESCRIPTION": "The focus of this component wasn't just control the activation of a loader, but multiple loaders. Like this,giving a name to the directive <code>gg-loader</code> make possible the automatic activation of the loaders thru the interceptor, now passing the name of the loader as the query param value <code>ggloader={loaderName}</code> or as parameter to the service <code>ggLoader.show('loaderName') and ggLoader.hide('loaderName')</code>.",
  "LOADER_EXAMPLE_2_CODE": "// Requesting with the parameter ggloader=loader1 or \n  using ggLoader.show('loader1') e ggLoader.hide('loader1')\n&lt;div gg-loader=\"loader1\" class=\"ggLoader\"&gt;\n  &lt;img src=\"image.png\" class=\"ggLoaderImage\" /&gt;\n&lt;/div&gt;\n\n// Requesting with the parameter ggloader=loader2 or \n  using ggLoader.show('loader2') e ggLoader.hide('loader2')\n&lt;div gg-loader=\"loader2\" class=\"ggLoader\"&gt;\n  &lt;img src=\"image.png\" class=\"ggLoaderImage\" /&gt;\n&lt;/div&gt;",
  "LOADER_CONFIGURATION_DESCRIPTION": "If you want to use other key-word to activate your loaders thru query param, instead of <code>ggloader</code>, you can configure a new key-word thru the <code>ggLoaderConfigProvider</code> in your app's <code>.config()</code>.",
  "LOADER_EXAMPLE_3_CODE": "// .config()\nggLoaderConfigProvider.setCustomActivation('keyword');",

  "MODALS_TITLE_DESCRIPTION": "A component to generate modals using <b>UI Bootstrap</b>, <b>Bootstrap</b> and <b>Font Awesome</b> libraries.",
  "MODALS_TITLE_DESCRIPTION_WITH_LINKS": "A component to generate modals using <a href=\"https://angular-ui.github.io/bootstrap\" target=\"_blank\">UI Bootstrap</a>, <a href=\"https://getbootstrap.com\" target=\"_blank\">Bootstrap</a> and <a href=\"http://fontawesome.io/\" target=\"_blank\">Font Awesome</a> libraries.",


  "PROPS_TITLE_DESCRIPTION": "A component for loading properties to the application, it works as well as a session object."

}