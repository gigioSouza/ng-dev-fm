{
  "HOME_DESCRIPTION": "nggs is a collection of components for angular 1.x which I developed while working on my day-to-day projects, everything was made focusing in make my team's development faster and easier. <br /> As I really enjoyed working on these components and loved the result. I hope you guys appreciate it.",
  "HOME_FOOTER_BLOCKQUOTE": "All my code and demos are written based on John Papa's <a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md\" target=\"_blank\">Angular Style Guide</a>, if you have some doubts about the demos's source code, take a look on it, it's a really amazing style guide.",

  "INTRODUCTION": "Introduction",
  "EXAMPLE": "Example(s):",
  "SINTAX": "Sintax",
  "DYNAMIC_PARAMS": "Smart parameters",
  "CONFIGURATION": "Configuration",

  "HTTP_TITLE_DESCRIPTION": "A component for easy generation of methods for accessing <b>REST APIs</b> using angular's <b>$http</b>.",
  "HTTP_INFO_DESCRIPTION": "The proposal of <code>nggs.http</code> is to stop wrinting methods that simply execute a <code>$http</code> or <code>$resource</code>. The idea is write an <code>array</code> of <code>strings</code> and <code>arrays</code> or an <code>objeto</code> with <code>strings</code> and <code>arrays</code> that correspond to the desired HTTP calls.",
  "HTTP_EXAMPLE_1_CODE": "var method = {\n  newUser: '@post',\n  updateUser: '@put=/:id',\n  getUser: '@get=/:id',\n  deleteUser: '@delete=/:id',\n  getUsersPage: ['@get', { params: { page: 1, size: 10 } }]\n}\n\nOU\n\nvar methods = [\n  'newUser@post',\n  'updateUser@put=/:id',\n  'getUser@get=/:id',\n  'deleteUser@delete=/:id',\n  ['getUsersPage@get', { params: { page: 1, size: 10 } }],\n]\n\nvar api = ggHttp('http://www.mydomain.com/api/user', metodos, otherApi);",
  "HTTP_EXAMPLE_1_RESULT": "The result of the created methods will be:",
  "HTTP_EXAMPLE_1_RESULT_CODE": "api.newUser({ name: 'Giovane' })\nPOST http://www.mydomain.com/api/user and { name: 'Giovane' } as payload\n\napi.updateUser({ id: 1 }, { name: 'Giovane Souza' })\nPUT http://www.mydomain.com/api/user/1 and { name: 'Giovane Souza' } as payload\n\napi.getUser({ id: 1 })\nGET http://www.mydomain.com/api/user/1\n\napi.deleteUser({ id: 1 })\nDELETE http://www.mydomain.com/api/user/1\n\napi.getUsersPage()\nGET http://www.mydomain.com/api/user&page=1&size=10\n\napi.getUsersPage({ page: 2, size: 10 })\nGET http://mydomain.com/api/user&page=2&size=10",
  "HTTP_EXAMPLE_1_EXPLANATION": "Observe that the method <code>getUsersPage</code> is created with an <code>array</code> composed by a <code>string</code> and an <code>objeto</code>.<br />The <code>string</code> is responsible to identify the desired <code>HTTP</code> method and the endpoint's url.<br />The <code>object</code> is optinal and is responsible for any <code>default</code> configuration that you may want set to the method.<br />Observe that if no <code>query param</code> is given to the method, the <code>default</code> parameters are <code>?page=1&size=10</code>.<br />Afterwards the order and responsabilities of each parameter will be explained.<br />Also, observe that there is a third parameter on the method <code>ggHttp</code>, the <code>otherApi</code>. This third parameter is here for the case you want to merge your new created api to another existing objeto. It's basically an \"extends\".",
  "HTTP_SINTAX_DESCRIPTION": "The sintax to create the methods is simple:",
  "HTTP_EXAMPLE_2_CODE": "[\n  \"{methodName}@{HttpMethod}={endpointUrl}\",\n  [\"{methodName}@{HttpMethod}={endpointUrl}\", {methodDefaultConfiguration}]\n\nOU\n\n{\n  {methodName}: \"@{HttpMethod}={endpointUrl}\",\n  {methodName}: [\"@{HttpMethod}={endpointUrl}\", {methodDefaultConfiguration}]\n}",
  "HTTP_EXAMPLE_2_EXPLANATION_1": "The <code>methodName</code> will be the name of the created method. <br /><br /> The <code>@</code> followed by <code>HttpMethod</code> define which HTTP method will be used in the request. The accepted methods and writing of them are: <code>@get/@Get/@GET, @post/@Post/@POST, @put/@Put/@PUT and @delete/@Delete/@DELETE</code>. <br /><br />The <code>endpointUrl</code> is the endpoint url of the desired service. You may use url variables using <code>:</code>.",
  "HTTP_EXAMPLE_2_RESULT": "http://www.mydomain.com/api/user/:id  -> Where :id the url's variable",
  "HTTP_EXAMPLE_2_EXPLANATION_2": "The code>{methodDefaultConfiguration}</code> will be the default configuration for the <code>$http</code> of your request. It'll overwrite the default configuration set by <code>ggHttpConfigProvider</code>, that will be presented afterwards. And it may be overwriten on the method invokation by passing an object for it as the last parameter.It'll be shown bellow.",
  "HTTP_DYNAMIC_PARAMS_DESCRIPTION": "Os parâmetros dinâmicos seguem a seguinte ordem: 1º variáveis de url, 2º payload, 3º query params e 4º configurações HTTP.<br /><br />1º <strong>Variáveis de url</strong> - Caso haja alguma marcação de variável na url o primeiro parâmetro serão as variáveis, caso não haja o próximo na ordem toma o seu lugar. As variáveis devem ser passadas em um objeto cujos atributos correspondam as variáveis.<br />Exemplo: Para a url <code>/user/:id</code> o parâmetro de variável de url deverá conter o atributo <code>id</code>.<br /><br/>2º <strong>Payload</strong> - Caso o método HTTP seja <em class=\"text-uppercase\"><strong>diferente</strong></em> de <code>GET</code> esse parâmetro é considerado e representa o payload da requisição, caso o método HTTP seja <code>GET</code> o próximo na ordem toma seu lugar.<br /><br />3º <strong>Query params</strong> - Esse parâmetro insere o objeto passado para o atributo <code>params</code> do <code>$http</code>. Como não há condição de uso para ele não há como ignorar este parâmetro para acessar o próximo, então recomenda-se que passe um valor nulo ou um objeto vazio caso queria pulá-lo para utilizar o próximo parâmetro. Mas caso não necessite usar nem este nem o próximo parâmetro, ambos podem ser ignorados na invocação do método.<br /><br />4º <strong>Configurações HTTP</strong> - Atribui todos os atributos de configuração do objeto passado ao <code>$http</code>. Como é o ultimo parâmetro, este pode ser ignorado quando não há necessidade de uso.",
  "HTTP_EXAMPLE_3_CODE": "Variáveis de url + POST/PUT/DELETE:\n1º parâmetro = Objeto de variáveis de url -> OBRIGATÓRIO\n2º parâmetro = Payload da requisição -> OBRIGATÓRIO\n3º parâmetro = Objeto de query params -> OPCIONAL\n4º parâmetro = Objeto de configuração do $http -> OPCIONAL\n\nPOST/PUT/DELETE:\n1º parâmetro = Payload da requisição -> OBRIGATÓRIO\n2º parâmetro = Objeto de query params -> OPCIONAL\n3º parâmetro = Objeto de configuração do $http -> OPCIONAL\n\nVariáveis de url + GET:\n1º parâmetro = Objeto de variáveis de url -> OBRIGATÓRIO\n2º parâmetro = Objeto de query params -> OPCIONAL\n3º parâmetro = Objeto de configuração do $http -> OPCIONAL\n\nGET:\n1º parâmetro = Objeto de query params -> OPCIONAL\n2º parâmetro = Objeto de configuração do $http -> OPCIONAL",
  "HTTP_CANCELING_REQUEST": "Cancelando uma requisição",
  "HTTP_CANCELING_REQUEST_DESCRIPTION": "Caso você precise cancelar sua requisição(forçando um timeout), toda <code>Promise</code> criada pelo <code>ggHttp</code> implementa o cancelamento de requisição através do <code>timeout</code> do <code>$http</code>. Assim basta chamar o método <code>.cancel()</code> na <code>Promise</code> retornada pelo método e pronto.",
  "HTTP_EXAMPLE_4_CODE": "api.metodo().cancel()",
  "HTTP_CANCELING_REQUEST_ALERT": "<strong>Atenção!</strong> Caso você configure um <code>timeout</code> padrão pela API do <code>nggs.http</code> ou através de interceptadores, o método de cancelamento não irá funcionar. No caso de configurar via API do <code>nggs.http</code> o método de cancelamento não será criado, assim gerando erro caso invocado.",
  "HTTP_EXAMPLE_5_EXPLANATION": "Para ignorar o <code>timeout</code> padrão configurado basta passar o atributo <code>cancelable</code> como parâmetro de configuração para sobrescrever.",
  "HTTP_EXAMPLE_5_CODE": "var metodos = {\n  getPostagem: [\"@get\", { cancelable: true }]\n}\n// Isso sobrescreve a configuração padrão feita pelo ggHttpConfigProvider\n\napi.getPostagem({query params}, { cancelable: true });\n// Isso sobrescreve a configuração padrão feita pelo ggHttpConfigProvider e a configuração feita na geração do método",
  "HTTP_CONFIGURATION_DESCRIPTION": "Além das configurações apresentadas acima durante a geração do método ou invocação dele, você também pode definir configurações padrão para todos os métodos gerados através do <code>ggHttp()</code>. Basta usar o <code>ggHttpConfigProvider</code> no <code>.config()</code> do seu app.",
  "HTTP_EXAMPLE_6_CODE": ".config(['ggHttpConfigProvider', function(ggHttpConfigProvider) {\n  ggHttpConfigProvider.setDefaults({ headers: ..., transformRequest: ..., transformResponse: ... });\n}]);",
  "HTTP_CONFIGURATION_ALERT": "As configurações são as disponíveis pela API do <code>$http</code>",

  "LOADER_TITLE_DESCRIPTION": "A component that launches a loader automatically by intercepting all http requests made by angular's <b>$http</b> service or manually thru a factory.",

  "MODALS_TITLE_DESCRIPTION": "A component to generate modals using <b>UI Bootstrap</b>, <b>Bootstrap</b> and <b>Font Awesome</b> libraries.",

  "PROPS_TITLE_DESCRIPTION": "A component for loading properties to the application, it works as well as a session object."

}