{
  "HOME_DESCRIPTION": "nggs é uma coleção de componentes para angular 1.x que eu desenvolvi durante meu dia-a-dia no trabalho, tudo foi feito focado em tornar o desenvolvimento da minha equipe mais rápido e fácil. <br /> Como eu realmente realmente gostei de trabalhar nesses componentes e adorei o resultado. Espero que gostem.",
  "HOME_FOOTER_BLOCKQUOTE": "Todo meu código e demos foram escritos baseados no <a href=\"https://github.com.br/johnpapa/angular-styleguide/blob/master/a1/README.md\" target=\"_blank\">Guia de estilo para AngularJS</a> de John Papa's. Caso tenha alguma dúvida do código fonte das demos de uma olhada nele, 'it's a really amazing style guidé um guia muito bom.",

  "INTRODUCTION": "Introdução",
  "EXAMPLE": "Exemplo(s):",
  "SINTAX": "Sintaxe",
  "DYNAMIC_PARAMS": "Parâmetros dinâmicos",
  "CONFIGURATION": "Configuração",

  "HTTP_TITLE_DESCRIPTION": "Um componente para fácil geração de métodos que acessem <b>APIs REST</b> usando o serviço <b>$http</b> do angular.",
  "HTTP_INFO_DESCRIPTION": "A proposta do <code>nggs.http</code> é deixar de escrever métodos que simplemente executem um <code>$http</code> ou <code>$resource</code>. A idéia é escrever um <code>array</code> de <code>strings</code> e <code>arrays</code> ou um <code>objeto</code> com <code>strings</code> e <code>arrays</code> que correspondam as chamadas HTTP desejadas.",
  "HTTP_EXAMPLE_1_CODE": "var metodos = {\n  novoUsuario: '@post',\n  atualizarUsuario: '@put=/:id',\n  recuperarUsuario: '@get=/:id',\n  deletarUsuario: '@delete=/:id',\n  recuperarPaginaUsuario: ['@get', { params: { pagina: 1, tamanho: 10 } }]\n}\n\nOU\n\nvar metodos = [\n  'novoUsuario@post',\n  'atualizarUsuario@put=/:id',\n  'recuperarUsuario@get=/:id',\n  'deletarUsuario@delete=/:id',\n  ['recuperarPaginaUsuario@get', { params: { pagina: 1, tamanho: 10 } }],\n]\n\nvar api = ggHttp('http://www.meudominio.com.br/api/usuario', metodos, outraApi);",
  "HTTP_EXAMPLE_1_RESULT": "O resultado dos métodos criados será:",
  "HTTP_EXAMPLE_1_RESULT_CODE": "api.novoUsuario({ nome: 'Giovane' })\nPOST http://www.meudominio.com.br/api/usuario e { nome: 'Giovane' } como payload\n\napi.atualizarUsuario({ id: 1 }, { nome: 'Giovane Souza' })\nPUT http://www.meudominio.com.br/api/usuario/1 e { nome: 'Giovane Souza' } como payload\n\napi.recuperarUsuario({ id: 1 })\nGET http://www.meudominio.com.br/api/usuario/1\n\napi.deletarUsuario({ id: 1 })\nDELETE http://www.meudominio.com.br/api/usuario/1\n\napi.recuperarPaginaUsuario()\nGET http://www.meudominio.com.br/api/usuario&pagina=1&tamanho=10\n\napi.recuperarPaginaUsuario({ pagina: 2, tamanho: 10 })\nGET http://meudominio.com.br/api/usuario&pagina=2&tamanho=10",
  "HTTP_EXAMPLE_1_EXPLANATION": "Note que o método <code>recuperarPaginaUsuario</code> é criado com um <code>array</code> composto de uma <code>string</code> e um <code>objeto</code>.<br />A <code>string</code> é reponsavél por dizer qual o método <code>HTTP</code> desejado e a url do serviço.<br />O >code>objeto</code> é opcional e corresponde a qualquer configuração <code>default</code> que você deseja fazer àquele método.<br />Veja que caso não seja passado nenhum <code>query param</code> para o método, os parâmetros <code>default</code> são <code>?pagina=1&tamanho=10</code>.<br />Mais abaixo será explicado a ordem e a responsabilidade de cada parâmetro.<br />Note também que há um terceiro parâmetro no método <code>ggHttp</code>, o <code>outraApi</code>. Este terceiro parâmetro serve para o caso de você desejar inserir os métodos que quer gerar dentro de outro objeto existente. É basicamente um \"extends\".",
  "HTTP_SINTAX_DESCRIPTION": "A sintaxe para gerar os métodos é simples:",
  "HTTP_EXAMPLE_2_CODE": "[\n  \"{nomeDoMétodo}@{métodoHttp}={urlDoServiço}\",\n  [\"{nomeDoMétodo}@{métodoHttp}={urlDoServiço}\", {configuraçãoPadrãoDoMétodo}]\n\nOU\n\n{\n  {nomeDoMétodo}: \"@{métodoHttp}={urlDoServiço}\",\n  {nomeDoMétodo}: [\"@{métodoHttp}={urlDoServiço}\", {configuraçãoPadrãoDoMétodo}]\n}",
  "HTTP_EXAMPLE_2_EXPLANATION_1": "O <code>nomeDoMétodo</code> obviamente será o nome do método criado para fazer a chamada. <br /><br /> O <code>@</code> seguido do <code>métodoHttp</code> que definem qual método HTTP será usado na requisição. E os aceitos e suas maneiras de escrever válidas são: <code>@get/@Get/@GET, @post/@Post/@POST, @put/@Put/@PUT e @delete/@Delete/@DELETE</code>. <br /><br />A <code>urlDoServiço</code> é o endereço do endpoint desejado. Você pode usar variáveis na url usando <code>:</code>.",
  "HTTP_EXAMPLE_2_RESULT": "http://www.meudominio.com.br/api/usuario/:id  -> Onde :id é a variável da url",
  "HTTP_EXAMPLE_2_EXPLANATION_2": "O <code>{configuraçãoPadrãoDoMétodo}</code> será a configuração padrão do método para o <code>$http</code> de sua requisição. Ele sobrescreverá a configuração padrão feita pelo <code>ggHttpConfigProvider</code> que será apresentado logo abaixo. E também poderá ser sobrescrita na chamada do método passando um objeto de configuração como ultimo parâmetro da chamada, será mostrado logo abaixo.",
  "HTTP_DYNAMIC_PARAMS_DESCRIPTION": "Os parâmetros dinâmicos seguem a seguinte ordem: 1º variáveis de url, 2º payload, 3º query params e 4º configurações HTTP.<br /><br />1º <strong>Variáveis de url</strong> - Caso haja alguma marcação de variável na url, o primeiro parâmetro serão as variáveis. Caso não haja o próximo na ordem toma o seu lugar. As variáveis devem ser passadas em um objeto cujos atributos correspondam as variáveis.<br />Exemplo: Para a url <code>/usuario/:id</code> o parâmetro de variável de url deverá conter o atributo <code>id</code>.<br /><br/>2º <strong>Payload</strong> - Caso o método HTTP seja <em class=\"text-uppercase\"><strong>diferente</strong></em> de <code>GET</code> esse parâmetro é considerado e representa o payload da requisição, caso o método HTTP seja <code>GET</code> o próximo na ordem toma seu lugar.<br /><br />3º <strong>Query params</strong> - Esse parâmetro insere o objeto passado para o atributo <code>params</code> do <code>$http</code>. Como não há condição de uso para ele não há como ignorar este parâmetro para acessar o próximo, então recomenda-se que passe um valor nulo ou um objeto vazio caso queria pulá-lo para utilizar o próximo parâmetro. Mas caso não necessite usar nem este nem o próximo parâmetro, ambos podem ser ignorados na invocação do método.<br /><br />4º <strong>Configurações HTTP</strong> - Atribui todos os atributos do objeto ao <code>$http</code>. Como é o ultimo parâmetro, este pode ser ignorado quando não há necessidade de uso.",
  "HTTP_EXAMPLE_3_CODE": "Variáveis de url + POST/PUT/DELETE:\n1º parâmetro = Objeto de variáveis de url -> OBRIGATÓRIO\n2º parâmetro = Payload da requisição -> OBRIGATÓRIO\n3º parâmetro = Objeto de query params -> OPCIONAL\n4º parâmetro = Objeto de configuração do $http -> OPCIONAL\n\nPOST/PUT/DELETE:\n1º parâmetro = Payload da requisição -> OBRIGATÓRIO\n2º parâmetro = Objeto de query params -> OPCIONAL\n3º parâmetro = Objeto de configuração do $http -> OPCIONAL\n\nVariáveis de url + GET:\n1º parâmetro = Objeto de variáveis de url -> OBRIGATÓRIO\n2º parâmetro = Objeto de query params -> OPCIONAL\n3º parâmetro = Objeto de configuração do $http -> OPCIONAL\n\nGET:\n1º parâmetro = Objeto de query params -> OPCIONAL\n2º parâmetro = Objeto de configuração do $http -> OPCIONAL",
  "HTTP_CANCELING_REQUEST": "Cancelando uma requisição",
  "HTTP_CANCELING_REQUEST_DESCRIPTION": "Caso você precise cancelar sua requisição(forçando um <code>timeout</code>), toda <code>Promise</code> criada pelo <code>ggHttp</code> implementa o cancelamento de requisição através do <code>timeout</code> do <code>$http</code>. Assim basta chamar o método <code>.cancel()</code> na <code>Promise</code> retornada pelo método e pronto.",
  "HTTP_EXAMPLE_4_CODE": "api.metodo().cancel()",
  "HTTP_CANCELING_REQUEST_ALERT": "<strong>Atenção!</strong> Caso você configure um <code>timeout</code> padrão pela API do <code>nggs.http</code> ou através de interceptadores, o método de cancelamento não irá funcionar. No caso de configurar via API do <code>nggs.http</code> o método de cancelamento não será criado, assim gerando erro caso invocado.",
  "HTTP_EXAMPLE_5_EXPLANATION": "Para ignorar o <code>timeout</code> padrão configurado basta passar o atributo <code>cancelable</code> como parâmetro de configuração para sobrescrever.",
  "HTTP_EXAMPLE_5_CODE": "var metodos = {\n  getPostagem: [\"@get\", { cancelable: true }]\n}\n// Isso sobrescreve a configuração padrão feita pelo ggHttpConfigProvider\n\napi.getPostagem({query params}, { cancelable: true });\n// Isso sobrescreve a configuração padrão feita pelo ggHttpConfigProvider e a configuração feita na geração do método",
  "HTTP_CONFIGURATION_DESCRIPTION": "Além das configurações apresentadas acima durante a geração do método ou invocação dele, você também pode definir configurações padrão para todos os métodos gerados através do <code>ggHttp()</code>. Basta usar o <code>ggHttpConfigProvider</code> no <code>.config()</code> do seu app.",
  "HTTP_EXAMPLE_6_CODE": ".config(['ggHttpConfigProvider', function(ggHttpConfigProvider) {\n  ggHttpConfigProvider.setDefaults({ headers: ..., transformRequest: ..., transformResponse: ... });\n}]);",
  "HTTP_CONFIGURATION_ALERT": "As configurações são as disponíveis pela API do <code>$http</code>.",


  "LOADER_TITLE_DESCRIPTION": "Um componente que dispara um loader automaticamente por interceptar todas as requisições HTTP feitas pelo serviço <b>$http</b> do angular ou manualmente através de um serviço próprio.",

  "MODALS_TITLE_DESCRIPTION": "Um componente que gera modais usando as bibliotecas <b>UI Bootstrap</b>, <b>Bootstrap</b> e <b>Font Awesome</b>.",

  "PROPS_TITLE_DESCRIPTION": "Um componente para carregar propriedades para a aplicação, e também funciona como um objeto de sessão."
}